// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets
const SHEETS_CONFIG = {
    // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Google Sheets ID –∏–∑ URL
    SPREADSHEET_ID: '19-9wj5utmM3NMNGkUIu1vMPvTDczJC7D1eT9KyAZQIE',
    // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á Google Sheets API
    API_KEY: 'AIzaSyBVbITYBK1yiEUhwA6qjCpLkS6eU3_UsfM',
    RANGE: 'scrum-poker!A:F',
    UPDATE_INTERVAL: 3000 // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentSession = null;
let currentPlayer = null;
let syncInterval = null;
let lastUpdateTime = 0;

// –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
let sessionData = {
    players: {},
    task: '',
    isRevealed: false,
    votes: {}
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    const savedSession = localStorage.getItem('scrumPokerSession');
    if (savedSession) {
        try {
            const sessionInfo = JSON.parse(savedSession);
            document.getElementById('playerName').value = sessionInfo.playerName;
            document.getElementById('sessionId').value = sessionInfo.sessionId;
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏');
        }
    }
    
    updateSyncStatus('disconnected', '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏
function joinSession() {
    const playerName = document.getElementById('playerName').value.trim();
    const sessionId = document.getElementById('sessionId').value.trim();
    
    if (!playerName || !sessionId) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ ID —Å–µ—Å—Å–∏–∏');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if (SHEETS_CONFIG.API_KEY === 'YOUR_GOOGLE_SHEETS_API_KEY') {
        alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Google Sheets API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ script.js');
        showApiSetupInstructions();
        return;
    }
    
    currentSession = sessionId;
    currentPlayer = {
        name: playerName,
        id: generatePlayerId(),
        vote: null,
        joinedAt: Date.now()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    localStorage.setItem('scrumPokerSession', JSON.stringify({
        playerName,
        sessionId
    }));
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
    switchScreen('gameScreen');
    updateSessionInfo();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–µ—Å—Å–∏—é
    addPlayerToSession();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    startSync();
}

// –ü–æ–∫–∏–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
function leaveSession() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å–µ—Å—Å–∏—é?')) {
        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        removePlayerFromSession();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        stopSync();
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        currentSession = null;
        currentPlayer = null;
        sessionData = { players: {}, task: '', isRevealed: false, votes: {} };
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
        switchScreen('loginScreen');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function switchScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
function updateSessionInfo() {
    document.getElementById('currentSessionId').textContent = `–°–µ—Å—Å–∏—è: ${currentSession}`;
    document.getElementById('currentPlayerName').textContent = currentPlayer.name;
}

// –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
function selectCard(value) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç
    document.querySelectorAll('.card').forEach(card => {
        card.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
    const selectedCard = document.querySelector(`[data-value="${value}"]`);
    if (selectedCard) {
        selectedCard.classList.add('selected');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
    currentPlayer.vote = value;
    sessionData.votes[currentPlayer.id] = {
        playerName: currentPlayer.name,
        vote: value,
        timestamp: Date.now()
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
    updatePlayersDisplay();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
    syncToSheets();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
function updateTask() {
    const task = document.getElementById('currentTask').value.trim();
    if (task) {
        sessionData.task = task;
        document.getElementById('taskDisplay').textContent = task;
        document.getElementById('currentTask').value = '';
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
        syncToSheets();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã
function revealCards() {
    sessionData.isRevealed = true;
    updatePlayersDisplay();
    showResults();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
    syncToSheets();
}

// –°–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function resetVoting() {
    sessionData.isRevealed = false;
    sessionData.votes = {};
    currentPlayer.vote = null;
    
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç
    document.querySelectorAll('.card').forEach(card => {
        card.classList.remove('selected');
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    document.getElementById('results').style.display = 'none';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updatePlayersDisplay();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
    syncToSheets();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
function updatePlayersDisplay() {
    const playersList = document.getElementById('playersList');
    const playersCount = document.getElementById('playersCount');
    
    playersList.innerHTML = '';
    
    const allPlayers = {...sessionData.players};
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    if (currentPlayer && !allPlayers[currentPlayer.id]) {
        allPlayers[currentPlayer.id] = currentPlayer;
    }
    
    const playersArray = Object.values(allPlayers);
    playersCount.textContent = playersArray.length;
    
    playersArray.forEach(player => {
        const playerCard = document.createElement('div');
        playerCard.className = 'player-card';
        
        if (player.id === currentPlayer?.id) {
            playerCard.classList.add('current-player');
        }
        
        const hasVote = sessionData.votes[player.id];
        if (hasVote) {
            playerCard.classList.add('voted');
        }
        
        const playerName = document.createElement('div');
        playerName.className = 'player-name';
        playerName.textContent = player.name;
        
        const playerVote = document.createElement('div');
        playerVote.className = 'player-vote';
        
        if (hasVote) {
            if (sessionData.isRevealed) {
                playerVote.textContent = sessionData.votes[player.id].vote;
            } else {
                playerVote.classList.add('hidden');
            }
        } else {
            playerVote.textContent = '-';
        }
        
        playerCard.appendChild(playerName);
        playerCard.appendChild(playerVote);
        playersList.appendChild(playerCard);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function showResults() {
    const resultsDiv = document.getElementById('results');
    const votingResults = document.getElementById('votingResults');
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
    const votesCounts = {};
    const validVotes = [];
    
    Object.values(sessionData.votes).forEach(vote => {
        const value = vote.vote;
        votesCounts[value] = (votesCounts[value] || 0) + 1;
        if (typeof value === 'number' && value >= 0) {
            validVotes.push(value);
        }
    });
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const votingSummary = document.createElement('div');
    votingSummary.className = 'voting-summary';
    
    Object.keys(votesCounts).forEach(value => {
        const voteResult = document.createElement('div');
        voteResult.className = 'vote-result';
        
        const voteValue = document.createElement('div');
        voteValue.className = 'vote-value';
        voteValue.textContent = value;
        
        const voteCount = document.createElement('div');
        voteCount.className = 'vote-count';
        voteCount.textContent = `${votesCounts[value]} –≥–æ–ª–æ—Å${getVoteWord(votesCounts[value])}`;
        
        voteResult.appendChild(voteValue);
        voteResult.appendChild(voteCount);
        votingSummary.appendChild(voteResult);
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
    const consensus = document.createElement('div');
    consensus.className = 'consensus';
    
    const uniqueVotes = Object.keys(votesCounts).filter(vote => 
        typeof parseFloat(vote) === 'number' && !isNaN(parseFloat(vote))
    );
    
    if (uniqueVotes.length === 1 && validVotes.length > 1) {
        consensus.className += ' success';
        consensus.textContent = `üéâ –ö–æ–Ω—Å–µ–Ω—Å—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –û—Ü–µ–Ω–∫–∞: ${uniqueVotes[0]}`;
    } else if (validVotes.length > 0) {
        const avg = validVotes.reduce((a, b) => a + b, 0) / validVotes.length;
        consensus.className += ' warning';
        consensus.textContent = `üìä –†–∞–∑–±—Ä–æ—Å –º–Ω–µ–Ω–∏–π. –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${avg.toFixed(1)}. –û–±—Å—É–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.`;
    } else {
        consensus.textContent = 'ü§î –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.';
    }
    
    votingResults.innerHTML = '';
    votingResults.appendChild(votingSummary);
    votingResults.appendChild(consensus);
    
    resultsDiv.style.display = 'block';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generatePlayerId() {
    return 'player_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

function getVoteWord(count) {
    if (count === 1) return '';
    if (count >= 2 && count <= 4) return '–∞';
    return '–æ–≤';
}

// –†–∞–±–æ—Ç–∞ —Å Google Sheets API
function addPlayerToSession() {
    updateSyncStatus('syncing', '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏...');
    syncToSheets();
}

function removePlayerFromSession() {
    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (currentPlayer && sessionData.players[currentPlayer.id]) {
        delete sessionData.players[currentPlayer.id];
    }
    if (currentPlayer && sessionData.votes[currentPlayer.id]) {
        delete sessionData.votes[currentPlayer.id];
    }
    
    syncToSheets();
}

function syncToSheets() {
    if (!currentSession || !currentPlayer) return;
    
    updateSyncStatus('syncing', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const dataToSend = {
        session: currentSession,
        player: currentPlayer,
        sessionData: {
            ...sessionData,
            players: {
                ...sessionData.players,
                [currentPlayer.id]: currentPlayer
            }
        },
        timestamp: Date.now()
    };
    
    // –≠–º—É–ª—è—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Google Sheets API)
    setTimeout(() => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ fallback
        const storageKey = `scrumPoker_${currentSession}`;
        let existingData = {};
        try {
            existingData = JSON.parse(localStorage.getItem(storageKey) || '{}');
        } catch (e) {}
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        existingData.players = existingData.players || {};
        existingData.players[currentPlayer.id] = currentPlayer;
        existingData.task = sessionData.task;
        existingData.isRevealed = sessionData.isRevealed;
        existingData.votes = sessionData.votes;
        existingData.lastUpdate = Date.now();
        
        localStorage.setItem(storageKey, JSON.stringify(existingData));
        
        updateSyncStatus('synced', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }, 500);
}

function syncFromSheets() {
    if (!currentSession) return;
    
    const storageKey = `scrumPoker_${currentSession}`;
    try {
        const data = JSON.parse(localStorage.getItem(storageKey) || '{}');
        if (data.lastUpdate && data.lastUpdate > lastUpdateTime) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (data.players) {
                sessionData.players = data.players;
            }
            if (data.task !== undefined) {
                sessionData.task = data.task;
                document.getElementById('taskDisplay').textContent = data.task || '';
            }
            if (data.isRevealed !== undefined) {
                sessionData.isRevealed = data.isRevealed;
                if (data.isRevealed) {
                    showResults();
                } else {
                    document.getElementById('results').style.display = 'none';
                }
            }
            if (data.votes) {
                sessionData.votes = data.votes;
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –≥–æ–ª–æ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                const myVote = data.votes[currentPlayer?.id];
                if (myVote && currentPlayer) {
                    currentPlayer.vote = myVote.vote;
                    document.querySelectorAll('.card').forEach(card => {
                        card.classList.remove('selected');
                    });
                    const selectedCard = document.querySelector(`[data-value="${myVote.vote}"]`);
                    if (selectedCard) {
                        selectedCard.classList.add('selected');
                    }
                }
            }
            
            lastUpdateTime = data.lastUpdate;
            updatePlayersDisplay();
        }
    } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', e);
    }
}

function startSync() {
    if (syncInterval) {
        clearInterval(syncInterval);
    }
    
    syncInterval = setInterval(() => {
        syncFromSheets();
    }, SHEETS_CONFIG.UPDATE_INTERVAL);
    
    // –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    syncFromSheets();
}

function stopSync() {
    if (syncInterval) {
        clearInterval(syncInterval);
        syncInterval = null;
    }
    updateSyncStatus('disconnected', '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
}

function updateSyncStatus(status, text) {
    const syncStatus = document.getElementById('syncStatus');
    const syncIndicator = document.getElementById('syncIndicator');
    const syncText = document.getElementById('syncText');
    
    syncStatus.className = `sync-status ${status}`;
    
    switch (status) {
        case 'syncing':
            syncIndicator.textContent = 'üîÑ';
            break;
        case 'synced':
            syncIndicator.textContent = '‚úÖ';
            setTimeout(() => {
                if (syncText.textContent === text) {
                    updateSyncStatus('connected', '–ü–æ–¥–∫–ª—é—á–µ–Ω');
                }
            }, 2000);
            break;
        case 'connected':
            syncIndicator.textContent = 'üü¢';
            break;
        case 'error':
            syncIndicator.textContent = '‚ùå';
            break;
        case 'disconnected':
            syncIndicator.textContent = 'üî¥';
            break;
    }
    
    syncText.textContent = text;
}

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ API
function showApiSetupInstructions() {
    const instructions = `
–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Google Sheets API:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://console.developers.google.com/
2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
3. –í–∫–ª—é—á–∏—Ç–µ Google Sheets API
4. –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á
5. –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_GOOGLE_SHEETS_API_KEY' –≤ script.js –Ω–∞ –≤–∞—à API –∫–ª—é—á
6. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∞ Google —Ç–∞–±–ª–∏—Ü–∞ –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è

–¢–µ–∫—É—â–µ–µ –¥–µ–º–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å localStorage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
    `;
    
    alert(instructions);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', e.error);
    updateSyncStatus('error', '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
window.addEventListener('offline', function() {
    updateSyncStatus('error', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
});

window.addEventListener('online', function() {
    if (currentSession) {
        updateSyncStatus('syncing', '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
        syncToSheets();
    }
});